var N = null;var searchIndex = {};
searchIndex["lamport_sigs"]={"doc":"lamport implements one-time hash-based signatures using the Lamport signature scheme.","items":[[3,"PublicKey","lamport_sigs","A one-time signing public key",N,N],[3,"PrivateKey","","A one-time signing private key",N,N],[11,"clone","","",0,[[["self"]],["publickey"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["publickey"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["publickey"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"clone","","",1,[[["self"]],["privatekey"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_vec","","Intializes a public key with a byte vector. Returns `None` if it couldn't parse the provided data",0,[[["vec",["u8"]],["algorithm"]],["option",["publickey"]]]],[11,"to_bytes","","Serializes a public key into a byte vector",0,[[["self"]],["vec",["u8"]]]],[11,"verify_signature","","Verifies that the signature of the data is correctly signed with the given key",0,N],[11,"new","","Generates a new random one-time signing key. This method can panic if OS RNG fails",1,[[["algorithm"]],["privatekey"]]],[11,"public_key","","Returns the public key associated with this private key",1,[[["self"]],["publickey"]]],[11,"sign","","Signs the data with the private key and returns the result if successful. If unsuccesful, an explanation string is returned",1,N],[11,"drop","","",1,[[["self"]]]],[11,"eq","","",1,[[["self"],["privatekey"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["privatekey"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["privatekey"]],["ordering"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]]],"paths":[[3,"PublicKey"],[3,"PrivateKey"]]};
initSearch(searchIndex);
